# Code Generated by Sidekick is for learning and experimentation purposes only.

import streamlit as st
import pandas as pd
import numpy as np
import joblib
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split

# Page config
st.set_page_config(page_title="Finance Advisor", page_icon="ðŸ’¸", layout="centered")

# Custom CSS
st.markdown("""
    <style>
        .main {background-color: #f2f6fc;}
        .stButton>button {background-color: #0099ff; color: white; font-size: 18px;}
        .stTextInput, .stSelectbox {font-size: 18px;}
        .stTitle {color: #0099ff;}
        .stSubheader {color: #0077cc;}
        .stMarkdown {font-size: 18px;}
    </style>
    """, unsafe_allow_html=True)

st.title("ðŸ’¸ Finance Advisor Web App")
st.write("Get personalized investment advice based on your preferences.")

# Load data
try:
    finance_df = pd.read_csv('Finance_data.csv')
except Exception as e:
    st.error(f"Error loading data file: {e}")
    st.stop()

# Standardize column names
finance_df.columns = finance_df.columns.str.strip().str.lower().str.replace(' ', '_')

# Helper to get options from data
def get_options(col, default=None):
    opts = finance_df[col].dropna().unique().tolist() if col in finance_df.columns else []
    opts = sorted([str(x) for x in opts])
    if default and str(default) not in opts:
        opts = [str(default)] + opts
    return opts if opts else [str(default)] if default else []

# User form
with st.form("advisor_form"):
    gender = st.selectbox("Select your gender:", get_options('gender', 'Female'))
    age = st.number_input("Select your age:", min_value=18, max_value=100, value=21)
    investment_avenues = st.selectbox("Do you invest in Investment Avenues?", get_options('investment_avenues', 'No'))
    mutual_funds = st.selectbox("Do you invest in Mutual Funds?", get_options('mutual_funds', '1'))
    equity_market = st.selectbox("Do you invest in Equity Market?", get_options('equity_market', '1'))
    debentures = st.selectbox("Do you invest in Debentures?", get_options('debentures', '1'))
    government_bonds = st.selectbox("Do you invest in Government Bonds?", get_options('government_bonds', '1'))
    fixed_deposits = st.selectbox("Do you invest in Fixed Deposits?", get_options('fixed_deposits', '1'))
    ppf = st.selectbox("Do you invest in PPF?", get_options('ppf', '1'))
    gold = st.selectbox("Do you invest in Gold?", get_options('gold', '2'))
    stock_market = st.selectbox("Do you invest in Stock Market?", get_options('stock_marktet', 'No'))  # spelling as per your data
    factor = st.selectbox("What is your main investment factor?", get_options('factor', 'Locking Period'))
    objective = st.selectbox("What is your investment objective?", get_options('objective', 'Capital Appreciation'))
    purpose = st.selectbox("What is your investment purpose?", get_options('purpose', 'Returns'))
    duration = st.selectbox("What is your investment duration?", get_options('duration', '1-3 years'))
    invest_monitor = st.selectbox("How often do you monitor investments?", get_options('invest_monitor', 'Monthly'))
    expect = st.selectbox("What returns do you expect?", get_options('expect', '10%-20%'))
    avenue = st.selectbox("Preferred investment avenue?", get_options('avenue', 'Public Provident Fund'))
    savings_objectives = st.selectbox("What are your savings objectives?", get_options('what_are_your_savings_objectives', 'Retirement Plan'))

    submitted = st.form_submit_button("Get Investment Advice")

if submitted:
    # Prepare user input for matching
    user_inputs = {
        'gender': gender,
        'age': str(age),
        'Investment_Avenues': investment_avenues,
        'Mutual_Funds': mutual_funds,
        'Equity_Market': equity_market,
        'Debentures': debentures,
        'Government_Bonds': government_bonds,
        'Fixed_Deposits': fixed_deposits,
        'PPF': ppf,
        'Gold': gold,
        'Stock_Marktet': stock_market,  # spelling as per your data
        'Factor': factor,
        'Objective': objective,
        'Purpose': purpose,
        'Duration': duration,
        'Invest_Monitor': invest_monitor,
        'Expect': expect,
        'Avenue': avenue,
        'What_Are_Your_Savings_Objectives': savings_objectives
    }

    # Matching logic: score each row by number of matches
    def score_row(row, user_inputs):
        score = 0
        for col, val in user_inputs.items():
            if col in row.index:
                if str(row[col]).lower() == str(val).lower():
                    score += 1
        return score

    finance_df['match_score'] = finance_df.apply(lambda row: score_row(row, user_inputs), axis=1)
    best_match = finance_df.sort_values('match_score', ascending=False).iloc[0]

    recommended_avenue = best_match['avenue'] if 'avenue' in best_match else None
    advice = best_match['reason_equity'] if 'reason_equity' in best_match else None

    # Show only the advice and recommendation
    if recommended_avenue:
        st.success(f"Recommended Investment Avenue: **{recommended_avenue}**")
        if advice:
            st.write(f"**Advice:** {advice}")
    else:
        st.warning("No specific avenue recommendation found. Consider consulting a financial advisor.")

    # Show a graph: Distribution of recommended avenues for similar profiles
    st.subheader("How others like you invest")
    # Find similar profiles (e.g., same gender and age group)
    age_group = 'Young' if age <= 30 else 'Mid' if age <= 50 else 'Senior'
    similar = finance_df[
        (finance_df['gender'].str.lower() == gender.lower()) &
        (pd.cut(finance_df['age'].astype(float), bins=[18, 30, 50, 100], labels=['Young', 'Mid', 'Senior']) == age_group)
    ]
    if not similar.empty:
        fig, ax = plt.subplots()
        sns.countplot(y='avenue', data=similar, order=similar['avenue'].value_counts().index, ax=ax)
        ax.set_title("Investment Avenue Distribution (Similar Profiles)")
        st.pyplot(fig)
    else:
        st.info("Not enough similar profiles to show a distribution graph.")

    st.balloons()
    st.snow()
