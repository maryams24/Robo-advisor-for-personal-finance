# Code Generated by Sidekick is for learning and experimentation purposes only.

import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split

st.set_page_config(page_title="Finance Advisor", page_icon="ðŸ’¸", layout="centered")

st.title("ðŸ’¸ Finance Advisor Web App")
st.write("Get personalized investment advice based on your preferences.")

# Load your CSV with exact column names
try:
    finance_df = pd.read_csv('Finance_data.csv')
except Exception as e:
    st.error(f"Error loading data file: {e}")
    st.stop()

# Show columns for debugging (remove/comment out after confirming)
# st.write("Columns in your data:", finance_df.columns.tolist())

# Helper to get options for selectboxes
def get_options(col, default=None):
    opts = finance_df[col].dropna().unique().tolist() if col in finance_df.columns else []
    opts = sorted([str(x) for x in opts])
    if default and str(default) not in opts:
        opts = [str(default)] + opts
    return opts if opts else [str(default)] if default else []

with st.form("advisor_form"):
    gender = st.selectbox("GENDER", get_options('GENDER', 'Female'))
    age = st.number_input("AGE", min_value=18, max_value=100, value=21)
    invest_avenues = st.selectbox("Do you invest in Investment Avenues?", get_options('Do you invest in Investment Avenues?', 'No'))
    mf_rank = st.selectbox("What do you think are the best options for investing your money? (Rank in order of preference) [Mutual Funds]", get_options('What do you think are the best options for investing your money? (Rank in order of preference) [Mutual Funds]', '1'))
    eq_rank = st.selectbox("What do you think are the best options for investing your money? (Rank in order of preference) [Equity Market]", get_options('What do you think are the best options for investing your money? (Rank in order of preference) [Equity Market]', '1'))
    deb_rank = st.selectbox("What do you think are the best options for investing your money? (Rank in order of preference) [Debentures]", get_options('What do you think are the best options for investing your money? (Rank in order of preference) [Debentures]', '1'))
    gb_rank = st.selectbox("What do you think are the best options for investing your money? (Rank in order of preference) [Government Bonds]", get_options('What do you think are the best options for investing your money? (Rank in order of preference) [Government Bonds]', '1'))
    fd_rank = st.selectbox("What do you think are the best options for investing your money? (Rank in order of preference) [Fixed Deposits]", get_options('What do you think are the best options for investing your money? (Rank in order of preference) [Fixed Deposits]', '1'))
    ppf_rank = st.selectbox("What do you think are the best options for investing your money? (Rank in order of preference) [Public Provident Fund]", get_options('What do you think are the best options for investing your money? (Rank in order of preference) [Public Provident Fund]', '1'))
    gold_rank = st.selectbox("What do you think are the best options for investing your money? (Rank in order of preference) [Gold]", get_options('What do you think are the best options for investing your money? (Rank in order of preference) [Gold]', '1'))
    stock_market = st.selectbox("Do you invest in Stock Market?", get_options('Do you invest in Stock Market?', 'No'))
    factors = st.selectbox("What are the factors considered by you while investing in any instrument?", get_options('What are the factors considered by you while investing in any instrument?', 'Returns'))
    objective = st.selectbox("What is your investment objective?", get_options('What is your investment objective?', 'Capital Appreciation'))
    purpose = st.selectbox("What is your purpose behind investment?", get_options('What is your purpose behind investment?', 'Wealth Creation'))
    duration = st.selectbox("How long do you prefer to keep your money in any investment instrument?", get_options('How long do you prefer to keep your money in any investment instrument?', '1-3 years'))
    monitor = st.selectbox("How often do you monitor your investment?", get_options('How often do you monitor your investment?', 'Monthly'))
    expected_return = st.selectbox("How much return do you expect from any investment instrument?", get_options('How much return do you expect from any investment instrument?', '10%-20%'))
    mostly_invest = st.selectbox("Which investment avenue do you mostly invest in?", get_options('Which investment avenue do you mostly invest in?', 'Mutual Fund'))
    savings_obj = st.selectbox("What are your savings objectives?", get_options('What are your savings objectives?', 'Retirement Plan'))
    reason_equity = st.selectbox("Reasons for investing in Equity Market", get_options('Reasons for investing in Equity Market', 'Capital Appreciation'))
    reason_mf = st.selectbox("Reasons for investing in Mutual Funds", get_options('Reasons for investing in Mutual Funds', 'Better Returns'))
    reason_gb = st.selectbox("Reasons for investing in Government Bonds", get_options('Reasons for investing in Government Bonds', 'Safe Investment'))
    reason_fd = st.selectbox("Reasons for investing in Fixed Deposits", get_options('Reasons for investing in Fixed Deposits', 'Fixed Returns'))
    info_source = st.selectbox("Your sources of information for investments is", get_options('Your sources of information for investments is', 'Internet'))

    submitted = st.form_submit_button("Get Investment Advice")

if submitted:
    # Encode gender for grouping
    gender_encoded = 0 if gender == 'Female' else 1
    age_group = 'Young' if age <= 30 else 'Mid' if age <= 50 else 'Senior'

    # Find similar profiles (same gender and age group)
    age_bins = [18, 30, 50, 100]
    age_labels = ['Young', 'Mid', 'Senior']
    finance_df['age_group'] = pd.cut(finance_df['AGE'], bins=age_bins, labels=age_labels)
    similar = finance_df[(finance_df['GENDER'] == gender) & (finance_df['age_group'] == age_group)]

    # Recommend based on most common avenue among similar profiles
    if not similar.empty:
        recommended_avenue = similar['Which investment avenue do you mostly invest in?'].mode()[0]
        st.success(f"Recommended Investment Avenue: **{recommended_avenue}**")
    else:
        st.warning("No similar profiles found. Consider consulting a financial advisor.")

    # Show a graph: Distribution of investment avenues among similar profiles
    if not similar.empty:
        fig, ax = plt.subplots()
        sns.countplot(y='Which investment avenue do you mostly invest in?', data=similar,
                      order=similar['Which investment avenue do you mostly invest in?'].value_counts().index, ax=ax)
        ax.set_title("Investment Avenue Distribution (Similar Profiles)")
        st.pyplot(fig)
    else:
        st.info("Not enough similar profiles to show a distribution graph.")

    st.balloons()
    st.snow()
