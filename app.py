# Code Generated by Sidekick is for learning and experimentation purposes only.

import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
from sklearn.preprocessing import LabelEncoder, StandardScaler

# Page config for better look
st.set_page_config(page_title="Finance Advisor", page_icon="ðŸ’¸", layout="centered")

# Custom CSS for style
st.markdown("""
    <style>
        .main {background-color: #f2f6fc;}
        .stButton>button {background-color: #0099ff; color: white; font-size: 18px;}
        .stTextInput, .stSelectbox {font-size: 18px;}
        .stTitle {color: #0099ff;}
        .stSubheader {color: #0077cc;}
        .stMarkdown {font-size: 18px;}
    </style>
    """, unsafe_allow_html=True)

st.title("ðŸ’¸ Finance Advisor Web App")
st.write("Get personalized investment advice based on your preferences.")

# --- Data Loading ---
try:
    original_df = pd.read_csv('Original_data.csv')
    finance_df = pd.read_csv('Finance_data.csv')
except Exception as e:
    st.error(f"Error loading data files: {e}")
    st.stop()

# --- Data Preprocessing ---
# Standardize column names
original_df.columns = original_df.columns.str.strip().str.lower().str.replace(' ', '_')
finance_df.columns = finance_df.columns.str.strip().str.lower().str.replace(' ', '_')

# Combine for EDA and modeling
combined_df = pd.concat([original_df, finance_df], ignore_index=True)

# --- EDA (Exploratory Data Analysis) ---
# 1. Summary statistics
eda_summary = combined_df.describe(include='all')

# 2. Missing values
eda_missing = combined_df.isnull().sum()

# 3. Unique value counts
eda_unique = combined_df.nunique()

# 4. Outlier detection (for numeric columns)
eda_outliers = {}
for col in combined_df.select_dtypes(include=[np.number]).columns:
    q1 = combined_df[col].quantile(0.25)
    q3 = combined_df[col].quantile(0.75)
    iqr = q3 - q1
    lower = q1 - 1.5 * iqr
    upper = q3 + 1.5 * iqr
    outliers = combined_df[(combined_df[col] < lower) | (combined_df[col] > upper)]
    eda_outliers[col] = outliers.shape[0]

# 5. Distribution plots and correlation matrix (not shown in UI, but can be saved or logged)
# Uncomment below to save EDA plots if needed
# for col in combined_df.select_dtypes(include=[np.number]).columns:
#     plt.figure()
#     sns.histplot(combined_df[col].dropna())
#     plt.title(f'Distribution of {col}')
#     plt.savefig(f'{col}_distribution.png')
# plt.figure(figsize=(10,8))
# sns.heatmap(combined_df.corr(), annot=True, cmap='coolwarm')
# plt.title('Correlation Matrix')
# plt.savefig('correlation_matrix.png')

# --- Preprocessing ---
# Fill missing values
for col in combined_df.columns:
    if combined_df[col].dtype == 'O':
        combined_df[col] = combined_df[col].fillna('Unknown').astype(str).str.strip()
    else:
        combined_df[col] = combined_df[col].fillna(combined_df[col].median())

# Encode categorical variables
label_encoders = {}
for col in combined_df.select_dtypes(include='object').columns:
    le = LabelEncoder()
    combined_df[col] = le.fit_transform(combined_df[col])
    label_encoders[col] = le

# Normalize numeric columns
scaler = StandardScaler()
numeric_cols = combined_df.select_dtypes(include=[np.number]).columns.tolist()
combined_df[numeric_cols] = scaler.fit_transform(combined_df[numeric_cols])

# --- Feature Engineering ---
# Example: Create age group feature
if 'age' in combined_df.columns:
    combined_df['age_group'] = pd.cut(
        combined_df['age'],
        bins=[-np.inf, 30, 50, np.inf],
        labels=['Young', 'Mid', 'Senior']
    )
    # Encode new feature
    le_age_group = LabelEncoder()
    combined_df['age_group'] = le_age_group.fit_transform(combined_df['age_group'].astype(str))
    label_encoders['age_group'] = le_age_group

# --- Model Training ---
# Assume 'avenue' is the target column (change if needed)
target_col = 'avenue'
feature_cols = [col for col in combined_df.columns if col != target_col]

# Remove rows where target is missing
model_df = combined_df[combined_df[target_col].notnull()]

X = model_df[feature_cols]
y = model_df[target_col]

# Train/test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train Random Forest
rf = RandomForestClassifier(n_estimators=100, random_state=42)
rf.fit(X_train, y_train)

# --- Evaluation ---
y_pred = rf.predict(X_test)
model_accuracy = accuracy_score(y_test, y_pred)
model_confusion = confusion_matrix(y_test, y_pred)
model_report = classification_report(y_test, y_pred, zero_division=0)

# --- Helper for Dropdown Options (raw, not encoded) ---
def get_options(col, default=None):
    orig = original_df[col].dropna().unique().tolist() if col in original_df.columns else []
    fin = finance_df[col].dropna().unique().tolist() if col in finance_df.columns else []
    opts = sorted(list(set(orig + fin)))
    if default and default not in opts:
        opts = [default] + opts
    return opts if opts else [default] if default else []

# --- UI Form ---
with st.form("advisor_form"):
    gender = st.selectbox("Select your gender:", get_options('gender', 'Female'))
    age = st.number_input("Select your age:", min_value=18, max_value=100, value=21)
    investment_avenues = st.selectbox("Do you invest in Investment Avenues?", get_options('investment_avenues', 'No'))
    mutual_funds = st.selectbox("Do you invest in Mutual Funds?", get_options('mutual_funds', '1'))
    equity_market = st.selectbox("Do you invest in Equity Market?", get_options('equity_market', '1'))
    debentures = st.selectbox("Do you invest in Debentures?", get_options('debentures', '1'))
    government_bonds = st.selectbox("Do you invest in Government Bonds?", get_options('government_bonds', '1'))
    fixed_deposits = st.selectbox("Do you invest in Fixed Deposits?", get_options('fixed_deposits', '1'))
    ppf = st.selectbox("Do you invest in PPF?", get_options('ppf', '1'))
    gold = st.selectbox("Do you invest in Gold?", get_options('gold', '2'))
    stock_market = st.selectbox("Do you invest in Stock Market?", get_options('stock_marktet', 'No'))  # spelling as per your data
    factor = st.selectbox("What is your main investment factor?", get_options('factor', 'Locking Period'))
    objective = st.selectbox("What is your investment objective?", get_options('objective', 'Capital Appreciation'))
    purpose = st.selectbox("What is your investment purpose?", get_options('purpose', 'Returns'))
    duration = st.selectbox("What is your investment duration?", get_options('duration', '1-3 years'))
    invest_monitor = st.selectbox("How often do you monitor investments?", get_options('invest_monitor', 'Monthly'))
    expect = st.selectbox("What returns do you expect?", get_options('expect', '10%-20%'))
    avenue = st.selectbox("Preferred investment avenue?", get_options('avenue', 'Public Provident Fund'))

    submitted = st.form_submit_button("Get Investment Advice")

if submitted:
    st.subheader("Your Selections")
    st.markdown(f"""
    - **Gender:** {gender}
    - **Age:** {age}
    - **Investment Avenues:** {investment_avenues}
    - **Mutual Funds:** {mutual_funds}
    - **Equity Market:** {equity_market}
    - **Debentures:** {debentures}
    - **Government Bonds:** {government_bonds}
    - **Fixed Deposits:** {fixed_deposits}
    - **PPF:** {ppf}
    - **Gold:** {gold}
    - **Stock Market:** {stock_market}
    - **Factor:** {factor}
    - **Objective:** {objective}
    - **Purpose:** {purpose}
    - **Duration:** {duration}
    - **Investment Monitoring:** {invest_monitor}
    - **Expected Returns:** {expect}
    - **Preferred Avenue:** {avenue}
    """)

    # Prepare input for model (encode and scale as in training)
    user_df = pd.DataFrame([{
        'gender': gender,
        'age': age,
        'investment_avenues': investment_avenues,
        'mutual_funds': mutual_funds,
        'equity_market': equity_market,
        'debentures': debentures,
        'government_bonds': government_bonds,
        'fixed_deposits': fixed_deposits,
        'ppf': ppf,
        'gold': gold,
        'stock_marktet': stock_market,
        'factor': factor,
        'objective': objective,
        'purpose': purpose,
        'duration': duration,
        'invest_monitor': invest_monitor,
        'expect': expect,
        'avenue': avenue
    }])

    # Encode categorical features
    for col in user_df.columns:
        if col in label_encoders:
            user_df[col] = label_encoders[col].transform(user_df[col].astype(str))
    # Normalize numeric features
    user_df[numeric_cols] = scaler.transform(user_df[numeric_cols])

    # Feature engineering for user input
    if 'age' in user_df.columns:
        user_df['age_group'] = pd.cut(
            user_df['age'],
            bins=[-np.inf, 30, 50, np.inf],
            labels=['Young', 'Mid', 'Senior']
        )
        user_df['age_group'] = label_encoders['age_group'].transform(user_df['age_group'].astype(str))

    # Predict with model
    pred = rf.predict(user_df[feature_cols])[0]
    avenue_pred = label_encoders[target_col].inverse_transform([pred])[0]

    st.success(f"Based on your profile, our model recommends: **{avenue_pred}**")

    # Optionally, show model confidence
    proba = rf.predict_proba(user_df[feature_cols])[0]
    st.info(f"Model confidence: {np.max(proba)*100:.1f}%")

    # Show model evaluation metrics (for admin/debug, not user)
    with st.expander("Model Evaluation (for admin/debug)"):
        st.write("**Accuracy:**", model_accuracy)
        st.write("**Confusion Matrix:**")
        st.write(model_confusion)
        st.write("**Classification Report:**")
        st.text(model_report)

    st.balloons()
    st.snow()
